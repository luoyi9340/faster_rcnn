#   手写字母识别（tensorflow2练手程序）
dataset:
   #   训练集相关配置
   in_train: /Users/irenebritney/Desktop/vcode/dataset/num_letter/train
   #   多文件模式中指定每个文件读取多少，单文件模式就是总数
   count_train: 20000
   # count_train: 19674   #   超过32proposal的图片数量
   label_train: /Users/irenebritney/Desktop/vcode/dataset/num_letter/train.jsons
   #   label是否多文件。会从train.jsons0, train.jsons1...开始往后读，直到某个idx读不到为止。所以idx一定要连续
   label_train_mutiple: false
   #   验证集相关配置
   in_val: /Users/irenebritney/Desktop/vcode/dataset/num_letter/val
   count_val: 100
   label_val: /Users/irenebritney/Desktop/vcode/dataset/num_letter/val.jsons
   label_val_mutiple: false
   #   测试集相关配置
   in_test: /Users/irenebritney/Desktop/vcode/dataset/num_letter/test
   count_test: 100
   label_test: /Users/irenebritney/Desktop/vcode/dataset/num_letter/test.jsons
   label_test_mutiple: false
   
   
#   建议框(proposal_box缩写)相关配置（初步训练的RPN网络生成建议框用于训练fast-rcnn网络）
proposals:
   #   判定为有效建议框的anchor与label的IoU比例
   proposal_iou: 0.7
   #   每张图片有效建议框数量
   proposal_every_image: 32
   #   cbox.jsons输出目录
   train_proposal_out: temp/proposal/train_proposal.jsons
   val_proposal_out: temp/proposal/val_proposal.jsons
   test_proposal_out: temp/proposal/test_proposal.jsons
   #   打乱数据的buffer_size是batch_size的多少倍. < 0表示不做打乱
   shuffle_buffer_rate: -1
   #   训练时每次取多少个样本，总样本数一定要是他的整数倍(RepeatDataset处理不了每轮epoch尾数不足的问题)
   batch_size: 2
   #   训练多少个epochs
   epochs: 5
   

#   rois相关配置（原始图片生成roi候选框用于训练RPN网络）
rois:
   #   判定为正样本的iou比率（与某个label的IOU大于该值）
   positives_iou: 0.725
   #   判定为负样本的iou比率（与所有label的IOU都小于该值）
   negative_iou: 0.3
   #   每张图片多少个正样本（超过的IoU降序取前多少个，不够的补IoU=-1的数据，注：该数量必须<=实际的正样本数）
   positives_every_image: 32
   #   每张图片多少个负样本（不够的补IoU=-1的数据，注：该数量必须<=实际的正样本数）
   negative_every_image: 32
   #   打乱数据的buffer_size是batch_size的多少倍. < 0表示不做打乱
   shuffle_buffer_rate: -1
   #   训练时每次取多少个样本，总样本数一定要是他的整数倍(RepeatDataset处理不了每轮epoch尾数不足的问题)
   batch_size: 4
   #   训练多少个epochs
   epochs: 2
   #   每张图片生成的用于训练的roi矩形框信息（每个图片一个json，包含图片的roi矩形框）
   #   roi 面积大小，1:1时的宽高（想不通原生faster_rcc为什么只用了9种anchor就能较好覆盖标注。。。） 
   roi_areas:
      - 64                  #   6code时较高命中
      - 68                  #   6、5code时较高命中
      - 76                  #   6、5code时较高命中
      - 80                  #   6、5、4code时较高命中
      - 84                  #   6,4code时较高命中
      - 92                  #   4code时较高命中
   #   - 100                #   4code时较高命中
   #   roi w:h 比例（与原生faster_cnn要识别的图不一样。我的数据集中只有验证码，而且每个验证码gt框都是80*100这样大小的）
   roi_scales:
      - 0.8                #   4:5 6、5code时较高命中（此时label基本都是5:8，7:10）
      - 1                  #   1:1 4code时较高命中（此时label基本都是1:1的）
   #   训练数据集
   #   json格式：{file_name:"文件名", vcode:"验证码", positives:[((x,y,w,h), (v, x,y,w,h))...], negative:[(x,y,w,h), ...]}
   # train_rois_out: /Users/irenebritney/Desktop/vcode/dataset_server/temp/rois/rois_train.jsons
   train_rois_out: temp/rois/rois_train.jsons
   #   当对应的label_*_mutiple为true时有效。同时开启几个线程写入jsons，<=0表示单线程。（一个文件给1个线程，暂时还没摸清python的锁机制，不敢一个文件同时写。。。）
   #   若上面分文件时，这里也会对应写入多份jsons文件。对应rois_train.jsons1, rois_train.jsons2, ...
   train_max_workers: -1
   #   验证数据集
   # val_rois_out: /Users/irenebritney/Desktop/vcode/dataset_server/temp/rois/rois_val.jsons
   val_rois_out: temp/rois/rois_val.jsons
   val_max_workers: -1
   #   测试数据集
   test_rois_out: temp/rois/rois_test.jsons
   test_max_workers: -1


#   rpn网络相关配置
rpn:
   #   训练时的学习率
   train_learning_rate: 0.001
   #   Loss_cls + λ*Loss_reg中间的λ
   loss_lamda: 1
   #   模型保存（中间占位符表示用的什么cnns）
   save_weights_dir: temp/models/rpn
   #   tensorboard目录
   tensorboard_dir: logs/tensorboard/rpn
   #   用的什么cnns网络（resnet34 | resnet50）
   cnns: resnet34
   #   nms中判定为前景的最小置信度（大于此概率的anchor会被判定为前景）
   nms_threshold_positives: 0.5
   #   nms中判定为重叠的最小IoU（大于此IoU的anchor会被判定为重叠而被过滤掉）
   nms_threshold_iou: 0.95
   
   
#   fast_rcnn相关配置
fast_rcnn:
   #   roi pooling的kernel_size[H * W]
   roipooling_kernel_size: 
      - 10
      - 10
   #   loss = loss_cls + λ * loss_reg中间的那个λ
   loss_lamda: 0.1
   train_learning_rate: 0.001
   #   每层全连接参数维度
   fc_weights: 1024
   #   全连接层数
   fc_layers: 4
   #   dropout保留占比
   fc_dropout: 1
   #   用的什么cnns网络（resnet34 | resnet50）
   cnns: resnet34
   #   模型保存（中间占位符表示用的什么cnns）
   save_weights_dir: temp/models/fast_rcnn
   #   tensorboard目录
   tensorboard_dir: logs/tensorboard/fast_rcnn
      
      
#   CNNs网络相关配置
cnns:
   #   cnns层缩放比例（特征图相对原图缩放比例。相比原生CNN，我的数据集图比较小，特征图再缩到很小就没什么点来生成anchors了）
   feature_map_scaling: 8
   #   第一层通道数，后面的各层通道数在此基础上扩展
   base_channel_num: 32
   


#   环境相关
context:
   #   当前环境名称[dev | test | online]。就是给人看一下，其实没卵子用。。。
   name: dev
   #   是否执行后续动作
   is_after_operation: false
   

